// Heyu Liu- C15622730
//Assignment-4

#include <afxwin.h>  // necessary for MFC to work properly
#include <iostream>
#include "Homework.h"
#include "../../src/blepo.h"
#include <io.h>
#include <math.h>
#include <algorithm>

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

#define pi 3.1415926
using namespace blepo;
using namespace std;


// Find the median Histogram
void HistogramFind(const ImgGray& sourceimage)
{
	int Hist[256] = { 0 };
	int meanLow = 0;
	int meanHigh = 0;
	int threshold = 0;
	int thresholdTemp = 1;
	int k = 1;
//	int sumLow = 1;
//	int sumHigh = 1;
//	int LowCount = 0;
//	int HighCount = 0;
	for (ImgGray::ConstIterator p = sourceimage.Begin(); p != sourceimage.End();p++)
	{
		Hist[(*p)] = Hist[(*p)] + 1;
	}

	while (1)
	{
		int sumLow = 0;
		int sumHigh = 0;
		int LowCount = 0;
		int HighCount = 0;
		for (int i = 0; i < k; i++)
		{
			sumLow = Hist[i]*i + sumLow;
			LowCount = Hist[i] + LowCount;
		}
		if (LowCount != 0)
		{
			meanLow = sumLow / LowCount;
		}
		
		for (int i = k; i < 256; i++)
		{
			sumHigh = Hist[i]*i + sumHigh;
			HighCount = Hist[i] + HighCount;
		}
		meanHigh = sumHigh / HighCount;

		thresholdTemp = (meanHigh + meanLow) / 2;
		if (k == thresholdTemp)
			break;
		k = thresholdTemp;
	}
	cout << "Threshold is " << thresholdTemp << endl;
	//thresholding
	int count = 0;
	ImgGray oneThreshold(sourceimage.Width(), sourceimage.Height());
	ImgGray::Iterator p_thre = oneThreshold.Begin();
	for (ImgGray::ConstIterator p = sourceimage.Begin(); p != sourceimage.End(); p++, count++)
	{
		if (*p > thresholdTemp)
		{
			*(p_thre + count) = 255;
		}
		else
		{
			*(p_thre + count) = 0;
		}
	}

	Figure ThreshouldF("One time Threshould");
	ThreshouldF.Draw(oneThreshold);
}
//create a Gaussian Kernel
void GaussianKernel(const float& sigma, vector<float>* Gkernel)
{
	float f = 2.5;
	int mu = round(f*sigma - 0.5);
	int w = 2 * mu + 1;
	float sum = 0;
	for (int i = 0; i < w; i++)
	{ 
		Gkernel->push_back(exp(-(i - mu)*(i - mu) / (2 * sigma*sigma)));
		sum += (*Gkernel)[i];
	}

	//Display the Gaussian kernel in the window
	cout << "The Gaussian Kernel is " << endl;
	cout << "[" << endl;
	for (int i = 0; i < w; i++)
	{
		(*Gkernel)[i] = (*Gkernel)[i] / sum;
		cout << (*Gkernel)[i] << ", " << endl;
	}
	cout << "]" << endl;
}

//Creat a derivated Gaussian Kernel
void GaussianDKernel(const float& sigma, vector<float>* GDkernel)
{
	float f = 2.5;
	int mu = round(f*sigma - 0.5);
	int w = 2 * mu + 1;
	float sum = 0;
	for (int i = 0; i < w; i++)
	{
		GDkernel->push_back(-(i - mu)*exp(-(i - mu)*(i - mu) / (2 * sigma*sigma)));
		sum += (*GDkernel)[i] * i;
	}

	//Display the Derivated Gaussian kernel in the window
	cout << "The Derivated Gaussian Kernel is " << endl;
	cout << "[" << endl;
	for (int i = 0; i < w; i++)
	{
		(*GDkernel)[i] /= -sum;
		cout << (*GDkernel)[i] << ", " << endl;
	}
	cout << "]" << endl;
}

//Separability convolution to find x- and y- gradient components
void GradientFunction(const ImgFloat& input_float, const float& sigma, ImgFloat* gx, ImgFloat* gy)
{
	//Initialization and precomputation
	float f = 2.5;
	int mu = round(f*sigma - 0.5);
	int w = 2 * mu + 1;
	gx->Reset(input_float.Width(), input_float.Height());
	gy->Reset(input_float.Width(), input_float.Height());
	ImgFloat temperary(input_float.Width(), input_float.Height());

	int count = 0;
	for (int y = 0; y < input_float.Height(); y++)
	{
		for (int x = 0; x < input_float.Width(); x++)
		{
			(*gx)(x, y) = 0;
			(*gy)(x, y) = 0;
			temperary(x, y) = 0;
		}
	}

	//Prepare Gaussian kernel and derivated Gaussian kernel
	vector<float>GKernel, GDKernel;
	GaussianKernel(sigma, &GKernel);
	GaussianDKernel(sigma, &GDKernel);

	//GDKernel.push_back(0.115693);
	//GDKernel.push_back(0.0285088);
	//GDKernel.push_back(0.0512918);
	//GDKernel.push_back(0.0638838);
	//GDKernel.push_back(0.0464752);
	//GDKernel.push_back(0);
	//GDKernel.push_back(-0.0464752);
	//GDKernel.push_back(-0.0638838);
	//GDKernel.push_back(-0.0512918);
	//GDKernel.push_back(-0.0285088);
	//GDKernel.push_back(-0.0115693);

	//for (int i = 0; i < w; i++)
	//{
	//	cout << GDKernel[i] << ", " << endl;
	//}
	//cout << "]" << endl;


	//Gx gradient
	//I convulotes derivate Gaussian kernel
	for (int y = 0; y < input_float.Height(); y++)
	{
		for (int x = mu; x < input_float.Width() - mu; x++)
		{
			float val = 0;
			for (int i = 0; i < w; i++)
			{
				val += GDKernel[i] * input_float(x + mu - i, y);
				float pixel = input_float(x + mu - i, y);
				float kernel = GDKernel[i];
			}
			temperary(x, y) = val;
			float tempixel = temperary(x, y);
		}
	}
	//Results convolutes Gaussian kernel
	for (int y = mu; y < input_float.Height() - mu; y++)
	{
		for (int x = 0; x < input_float.Width(); x++)
		{
			float tempixel = temperary(x, y);
			float val = 0;
			for (int i = 0; i < w; i++)
			{
				val += GKernel[i] * temperary(x, y + mu - i);
				float pixel = temperary(x, y + mu - i);
				float kernel = GKernel[i];
			}
			(*gx)(x, y) = val;	//Return Gx
		}
	}

	//Gy gradient
	//I convolutes Gaussian kernel
	for (int y = 0; y < input_float.Height(); y++)
	{
		for (int x = mu; x < input_float.Width() - mu; x++)
		{
			float val = 0;
			for (int i = 0; i < w; i++)
			{
				val += GKernel[i] * input_float(x + mu - i, y);
			}
			temperary(x, y) = val;
		}
	}
	//Results convolutes derivated Gaussian kernel
	for (int y = mu; y < input_float.Height() - mu; y++)
	{
		for (int x = 0; x < input_float.Width(); x++)
		{
			float val = 0;
			for (int i = 0; i < w; i++)
			{
				val += GDKernel[i] * temperary(x, y + mu - i);
			}
			(*gy)(x, y) = val;	//Return Gy
		}
	}
}


//Non-maximal suppression
void SuppressionFunction(const ImgFloat& gx, const ImgFloat& gy, ImgFloat* magnitude, ImgFloat* phase, ImgFloat* gmax)
{
	magnitude->Reset(gx.Width(), gx.Height());
	phase->Reset(gx.Width(), gx.Height());
	gmax->Reset(gx.Width(), gx.Height());

	//Compute magnitude and phase of the image
	for (int y = 0; y < gx.Height(); y++)
	{
		for (int x = 0; x < gx.Width(); x++)
		{
			//find the max point around the target point
			(*magnitude)(x, y) = max(abs(gx(x, y)), abs(gy(x, y)));
			(*phase)(x, y) = atan2(gy(x, y), gx(x, y));
			(*gmax)(x, y) = 0;
		}
	}

	//Non-maximal suppression
	for (int y = 1; y < gx.Height() - 1; y++)
	{
		for (int x = 1; x < gx.Width() - 1; x++)
		{
			//find the maximum value of each pixel according to its phase 
			float val_left = 0, val_right = 0;
			if ((*phase)(x, y) > -pi / 8 && (*phase)(x, y) < pi / 8 || (*phase)(x, y) < -7 * pi / 8 || (*phase)(x, y) > 7 * pi / 8)
				//phase from -1/8pi to 1/8pi or <-7pi/8 or > 7pi/8
			{
				val_left = (*magnitude)(x - 1, y);
				val_right = (*magnitude)(x + 1, y);
			}
			else if ((*phase)(x, y) >= pi / 8 && (*phase)(x, y) < 3 * pi / 8 || (*phase)(x, y) < -5 * pi / 8 && (*phase)(x, y) > -7 * pi / 8)
				//phase from 8/pi to 3/8pi or from -5/8pi to -7/8pi
			{
				val_left = (*magnitude)(x - 1, y - 1);
				val_right = (*magnitude)(x + 1, y + 1);
			}
			else if ((*phase)(x, y) >= 3 * pi / 8 && (*phase)(x, y) < 5 * pi / 8 || (*phase)(x, y) < -3 * pi / 8 && (*phase)(x, y) > -5 * pi / 8)
				//phase from 3/8pi to 5/8pi or from -3/8 pi to -5/8pi
			{
				val_left = (*magnitude)(x, y - 1);
				val_right = (*magnitude)(x, y + 1);
			}
			else	//phase from 5/8pi to 7/8pi, which equals 5/8pi to -1/8pi
			{
				val_left = (*magnitude)(x + 1, y - 1);
				val_right = (*magnitude)(x - 1, y + 1);
			}
			if ((*magnitude)(x, y) < val_left || (*magnitude)(x, y) < val_right)	//Give the max value to gmax image
				(*gmax)(x, y) = 0;
			else
				(*gmax)(x, y) = (*magnitude)(x, y);
		}
	}
}

//Double threshold the image using non-maximal suppression image
void DTFuntion(const ImgFloat& gmax, ImgBinary* edge)
{
	//Sort the input image to find the high threshold value
	vector<float> sortImage;
	for (ImgFloat::ConstIterator p = gmax.Begin(); p != gmax.End(); p++)
	{
		sortImage.push_back(*p);
	}
	sort(sortImage.begin(), sortImage.end());

	//Use default percentage to find high and low threshold value
	float High_p = 0.04;
	int High_value = round(sortImage.size()*(1 - High_p));
	float HighThreshold = sortImage[High_value];
	float LowThreshold = HighThreshold / 5;

	//Initialize images
	ImgBinary threshold_hi(gmax.Width(), gmax.Height()), threshold_low(gmax.Width(), gmax.Height());
	edge->Reset(gmax.Width(), gmax.Height());
	ImgBinary::Iterator p_double = edge->Begin();
	ImgBinary::Iterator p_hi = threshold_hi.Begin();
	ImgBinary::Iterator p_low = threshold_low.Begin();
	int count = 0;
	for (ImgFloat::ConstIterator p = gmax.Begin(); p != gmax.End(); p++, count++)
	{
		*(p_double + count) = 0;
		*(p_hi + count) = 0;
		*(p_low + count) = 0;
	}

	//High threshold and low threshold
	count = 0;
	for (ImgFloat::ConstIterator p = gmax.Begin(); p != gmax.End(); p++, count++)
	{
		if (*p > HighThreshold)
		{
			*(p_hi + count) = 1;
			*(p_low + count) = 1;
			*(p_double + count) = 1;
		}
		else if (*p>LowThreshold)
		{
			*(p_low + count) = 1;
		}
	}

	//double-threshold using flood fill
	//Construct the frontier vector for flood fill to store high threshold seeds
	vector<CPoint> frontier;
	for (int y = 0; y < threshold_hi.Height(); y++)
	{
		for (int x = 0; x < threshold_hi.Width(); x++)
		{
			if (1 == threshold_hi(x, y))
			{
				CPoint seed(x, y);
				frontier.push_back(seed);
			}
		}
	}

	//Fill pixels in the frontier and related pixels
	while (0 != frontier.size())
	{
		CPoint seed = frontier.back();
		frontier.pop_back();
		//the left pixel of the seed point
		if (seed.x > 0)
		{
			if (1 == threshold_low(seed.x - 1, seed.y) && 0 == (*edge)(seed.x - 1, seed.y))
			{
				frontier.push_back(CPoint(seed.x - 1, seed.y));
				(*edge)(seed.x - 1, seed.y) = 1;
			}
		}
		//the right pixel of the seed point
		if (seed.x < gmax.Width())
		{
			if (1 == threshold_low(seed.x + 1, seed.y) && 0 == (*edge)(seed.x + 1, seed.y))
			{
				frontier.push_back(CPoint(seed.x + 1, seed.y));
				(*edge)(seed.x + 1, seed.y) = 1;
			}
		}
		//the up pixel of the seed point
		if (seed.y > 0)
		{
			if (1 == threshold_low(seed.x, seed.y - 1) && 0 == (*edge)(seed.x, seed.y - 1))
			{
				frontier.push_back(CPoint(seed.x, seed.y - 1));
				(*edge)(seed.x, seed.y - 1) = 1;
			}
		}
		//the down pixel of the seed point
		if (seed.y <gmax.Height())
		{
			if (1 == threshold_low(seed.x, seed.y + 1) && 0 == (*edge)(seed.x, seed.y + 1))
			{
				frontier.push_back(CPoint(seed.x, seed.y = 1));
				(*edge)(seed.x, seed.y + 1) = 1;
			}
		}
		//the left-up pixel
		if (seed.x > 0 && seed.y > 0)
		{
			if (1 == threshold_low(seed.x - 1, seed.y - 1) && 0 == (*edge)(seed.x - 1, seed.y - 1))
			{
				frontier.push_back(CPoint(seed.x - 1, seed.y - 1));
				(*edge)(seed.x - 1, seed.y - 1) = 1;
			}
		}
		//the left-down pixel
		if (seed.x > 0 && seed.y < gmax.Height())
		{
			if (1 == threshold_low(seed.x - 1, seed.y + 1) && 0 == (*edge)(seed.x - 1, seed.y + 1))
			{
				frontier.push_back(CPoint(seed.x - 1, seed.y + 1));
				(*edge)(seed.x - 1, seed.y + 1) = 1;
			}
		}
		//the right-up pixel
		if (seed.x < gmax.Width() && seed.y >0)
		{
			if (1 == threshold_low(seed.x + 1, seed.y - 1) && 0 == (*edge)(seed.x + 1, seed.y - 1))
			{
				frontier.push_back(CPoint(seed.x + 1, seed.y - 1));
				(*edge)(seed.x + 1, seed.y - 1) = 1;
			}
		}
		//the right-down pixel
		if (seed.x < gmax.Width() && seed.y < gmax.Height())
		{
			if (1 == threshold_low(seed.x + 1, seed.y + 1) && 0 == (*edge)(seed.x + 1, seed.y + 1))
			{
				frontier.push_back(CPoint(seed.x + 1, seed.y + 1));
				(*edge)(seed.x + 1, seed.y + 1) = 1;
			}
		}
	}
}

//Chamfer distance with the Manhanttan distance
void ChamferFunction(const ImgBinary& edge, ImgGray* chamfer)
{
	//Initialize the chamfer image
	chamfer->Reset(edge.Width(), edge.Height());
	for (ImgGray::Iterator p_c = chamfer->Begin(); p_c != chamfer->End(); p_c++)
	{
		*p_c = 0;
	}

	//first pass
	for (int y = 1; y < edge.Height() - 1; y++)
	{
		for (int x = 1; x < edge.Width() - 1; x++)
		{
			if (1 == edge(x, y))
			{
				(*chamfer)(x, y) = 0;
			}
			else
			{
				(*chamfer)(x, y) = min(1 + (*chamfer)(x - 1, y), 1 + (*chamfer)(x, y - 1));
			}
		}
	}
	//second pass
	for (int y = edge.Height() - 2; y >= 0; y--)
	{
		for (int x = edge.Width() - 2; x >= 0; x--)
		{
			if (1 == edge(x, y))
			{
				(*chamfer)(x, y) = 0;
			}
			else
			{
				(*chamfer)(x, y) = min((int)(*chamfer)(x, y), (*chamfer)(x + 1, y) + 1);
				(*chamfer)(x, y) = min((int)(*chamfer)(x, y), (*chamfer)(x, y + 1) + 1);
			}
		}
	}
}

//Probility map with template detection and return a best match point
CPoint DetectionFunction(const ImgGray& edge, ImgBinary& templateimage)
{
	//Creat a float image for probability map and initialize it
	ImgInt probability(edge.Width() - templateimage.Width(), edge.Height() - templateimage.Height());
	for (ImgInt::Iterator p = probability.Begin(); p != probability.End(); p++)
	{
		*p = 0;
	}

	//compute the probability map
	ImgBinary::Iterator p_end = templateimage.End();
	for (int y = 0; y < edge.Height() - templateimage.Height(); y++)
	{
		for (int x = 0; x < edge.Width() - templateimage.Width(); x++)
		{
			float sum = 0;
			int count = 0;
			for (ImgBinary::Iterator p = templateimage.Begin(); p != p_end; p++, count++)
			{
				if (1 == *p)
				{
					sum += edge(x + count%templateimage.Width(), y + count / templateimage.Width());
				}
			}
			probability(x, y) = sum;
		}
	}

	Figure probabilityF("Probability map", 200, 400);
	probabilityF.Draw(probability);

	//Find the best match point
	float minmatchvalue = probability(0, 0);
	int count = 0;
	int max_x = 0;
	int max_y = 0;

	//Find the minimum distance point in the probability map
	for (ImgInt::Iterator p = probability.Begin(); p != probability.End() - 1; p++, count++)
	{
		if (minmatchvalue > *p)
		{
			minmatchvalue = *p;
			max_x = count%probability.Width();
			max_y = count / probability.Width();
		}
	}

	//Create a CPoint and return it
	CPoint maxpoint(max_x, max_y);
	return maxpoint;
}


//Main function
int main(int argc, const char* argv[], const char* envp[])
{
	// Initialize MFC and return if failure
	HMODULE hModule = ::GetModuleHandle(NULL);
	if (hModule == NULL || !AfxWinInit(hModule, NULL, ::GetCommandLine(), 0))
	{
		printf("Fatal Error: MFC initialization failed (hModule = %x)\n", hModule);
		return 1;
	}

	try
	{
		//Initialization filenames
		string location = "../../images/";

		//If there are more than two inputs, begin to process images 
		if (2 < argc)
		{
			//Initialize the input image
			ImgBgr fileimage;

			//Load the file name and sigma
			float sigma = stof(argv[1]);
			string filename = argv[2];

			cout << "The file is: " << filename << endl;

			//Load the file location
			string filelocation = location + filename;


			//check if the first file exists
			while (true)
			{
				if ((_access(filelocation.c_str(), 0)) != -1)
				{
					//Load the first image
					Load(filelocation.c_str(), &fileimage);
				}
				if (fileimage.Height() > 0 && fileimage.Width() > 0)
				{
					break;
				}
				cout << "ERROR: cannot open " << filename << ", please open another file (please just type file name)" << endl;
				filename = "";
				getline(cin, filename);
				filelocation = location + filename;
			}
			ImgGray threshouldtest;
			Convert(fileimage, &threshouldtest);
			HistogramFind(threshouldtest);


			//*******************************************//
			//         original image processing         //
			//*******************************************//
			//Display the input image
			Figure FileF("Input Image", 0, 0);
			FileF.Draw(fileimage);

			//Convert input image to float image for further processing
			ImgFloat Input_Float;
			Convert(fileimage, &Input_Float);

			//Gaussian convolution to get x- and y- gradient components
			ImgFloat Gx, Gy;
			GradientFunction(Input_Float, sigma, &Gx, &Gy);
			Figure GxF("x gradient component", 100, 0), GyF("y gradient component", 200, 0);
			GxF.Draw(Gx);
			GyF.Draw(Gy);

			//Find the gradient magnitude and the phase, also the edges after non-max suppression
			ImgFloat Magnitude, Phase, GMax;
			SuppressionFunction(Gx, Gy, &Magnitude, &Phase, &GMax);
			Figure MagnitudeF("Magnitude", 300, 0), PhaseF("Phase", 400, 0), GMaxF("Non-max suppression image", 500, 0);
			MagnitudeF.Draw(Magnitude);
			PhaseF.Draw(Phase);
			GMaxF.Draw(GMax);

			//Double threshold for the non-max suppression edge image
			ImgBinary Edge;
			DTFuntion(GMax, &Edge);
			Figure EdgeF("The edge", 600, 0);
			EdgeF.Draw(Edge);

			//Find the chamfer distance for the edge image
			ImgGray Chamfer;
			ChamferFunction(Edge, &Chamfer);
			Figure ChamferF("Chamfer Image", 700, 0);
			ChamferF.Draw(Chamfer);

			//*******************************************//
			//         Template image processing         //
			//*******************************************//
			//if the fourth argument is not empty then treat the fourth argument as a template
			if (argv[3])
			{
				ImgBgr  TemplateImage;
				string templatename = argv[3];
				cout << "The template is " << templatename << endl;
				string templatelocation = location + templatename;
				//check if the template file exists
				while (true)
				{
					if ((_access(templatelocation.c_str(), 0)) != -1)
					{
						//Load the template image
						Load(templatelocation.c_str(), &TemplateImage);
					}
					if (TemplateImage.Height() > 0 && TemplateImage.Width() > 0)
					{
						break;
					}
					cout << "ERROR: cannot open " << templatename << ", please open another file (please just type file name)" << endl;
					filename = "";
					getline(cin, templatename);
					templatelocation = location + templatename;
				}
				Figure templateF("Template image", 0, 400);
				templateF.Draw(TemplateImage);

				//convert template image to float image for further processing
				ImgFloat Template_Float;
				Convert(TemplateImage, &Template_Float);

				//Gaussian convolution to get x- and y- gradient components
				GradientFunction(Template_Float, sigma, &Gx, &Gy);


				//Find the gradient magnitude and the phase, also the edges after non-max suppression
				ImgFloat MagnitudeT, PhaseT, GMaxT;
				SuppressionFunction(Gx, Gy, &MagnitudeT, &PhaseT, &GMaxT);

				//Double threshold for the non-max suppression edge image
				ImgBinary EdgeT;
				DTFuntion(GMaxT, &EdgeT);
				Figure EdgeTF("The edge", 100, 400);
				EdgeTF.Draw(EdgeT);

				//Get the best match point for DetectionFunction
				CPoint MatchPoint = DetectionFunction(Chamfer, EdgeT);

				//Create template image size rectangle and draw that rectangle on the original file
				Rect TemplateRect(MatchPoint.x, MatchPoint.y, MatchPoint.x + TemplateImage.Width(), MatchPoint.y + TemplateImage.Height());
				DrawRect(TemplateRect, &fileimage, Bgr(0, 255, 0));

				Figure MatchedF("Template matched image", 400, 400);
				MatchedF.Draw(fileimage);
			}
		}
		else
		{
			//Failed to input three file names
			cout << "Please press Ctrl+C to quit program and reinput another file" << endl;
		}
		cout << "Image processing finished, you can press Ctrl+C to quit the program" << endl;
		EventLoop();
	}

	catch (const Exception& e)
	{
		e.Display();
	}
	return 0;
}
